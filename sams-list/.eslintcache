[{"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\index.tsx":"1","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\reportWebVitals.ts":"2","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\App.tsx":"3","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\auth\\auth.tsx":"4","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\auth\\signup.tsx":"5","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\auth\\login.tsx":"6","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumCreate.tsx":"7","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumDisplay.tsx":"8","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumCard.tsx":"9","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumEdit.tsx":"10","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\threadDisplay.tsx":"11","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\threadCreate.tsx":"12","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\ThreadCard.tsx":"13","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\ThreadEdit.tsx":"14"},{"size":500,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":1619,"mtime":1609982187820,"results":"18","hashOfConfig":"16"},{"size":847,"mtime":1610408766812,"results":"19","hashOfConfig":"16"},{"size":3448,"mtime":1609963990012,"results":"20","hashOfConfig":"16"},{"size":1897,"mtime":1609982031313,"results":"21","hashOfConfig":"16"},{"size":3308,"mtime":1610390524053,"results":"22","hashOfConfig":"16"},{"size":8864,"mtime":1610500029487,"results":"23","hashOfConfig":"16"},{"size":2221,"mtime":1610375143679,"results":"24","hashOfConfig":"16"},{"size":2802,"mtime":1610388951208,"results":"25","hashOfConfig":"16"},{"size":4628,"mtime":1610486549012,"results":"26","hashOfConfig":"16"},{"size":3321,"mtime":1610411613093,"results":"27","hashOfConfig":"16"},{"size":1780,"mtime":1610486543362,"results":"28","hashOfConfig":"16"},{"size":2475,"mtime":1610413109124,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"13247cg",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"32"},"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\index.tsx",[],["67","68"],"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\reportWebVitals.ts",[],"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\App.tsx",["69"],"import React, {Component} from 'react';\nimport './App.css';\n// import Signup from \"./components/auth/signup\"\nimport Auth from \"./components/auth/auth\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\ninterface AppState {\n  token: string \n}\n\nclass App extends React.Component <{}, AppState>{\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      token: ''\n    }\n      this.setToken = this.setToken.bind(this)\n  } \n    setToken= (newToken: string) => {\n      // setp 1, getItem() from storage\n      const localToken = localStorage.getItem('token')\n      // step 2. check to see if there IS an item\n      // if(localToken){\n        console.log(localToken)\n        localStorage.setItem('token', newToken)    \n        this.setState({token: newToken})\n      // }\n      // step 3. setItem() -- set the token or locate token in the browser\n      // step 4. set state (look below V)\n    }\n  render(){\n    // const tokenProps ={token: this.state.token}\n    return (\n      <div className=\"App\">\n        <Router>\n          <div>\n            <ul>\n              <li><Link to='/'>Auth</Link></li>\n              \n            </ul>\n          </div>\n        <hr />\n        <Switch>\n          <Route exact path='/'>\n            <Auth setToken={this.setToken} token={this.state.token}/>\n          </Route>\n          <Route exact path='/home'>\n          </Route>\n        </Switch>\n        </Router>\n\n        {/* <header className=\"App-header\">\n          <p>{this.state.token}</p>\n          <Auth {...tokenProps} />\n        </header> */}\n      </div>\n    );\n  }\n}\n\nexport default App","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\auth\\auth.tsx",[],"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\auth\\signup.tsx",["70","71","72","73","74","75"],"import React, {useState, Component, FormEvent} from 'react';\r\n// import { isConstructorDeclaration } from 'typescript';\r\nimport {TextField} from '@material-ui/core'\r\n\r\n// type AuthState = { onClickHandler: React.FC }\r\ninterface AuthState{\r\n    firstName: string,\r\n    lastName: string,\r\n    email: string,\r\n    password: string,\r\n    role: string\r\n}\r\n\r\ninterface Props{\r\n    // onClickHandler: any\r\n    // classes: any,\r\n    // setToken : any\r\n}\r\nclass Signup extends React.Component<{}, AuthState> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            role: ''\r\n        }\r\n\r\n        this.submitHandler = this.submitHandler.bind(this);\r\n    }\r\n        submitHandler(e: FormEvent) {\r\n            e.preventDefault();\r\n            fetch(\"http://localhost:3000/user/create\", {\r\n                method: 'POST',\r\n                body: JSON.stringify({user: {firstName: this.state.firstName, lastName: this.state.lastName, email: this.state.email, password: this.state.password, role: this.state.role }}),\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json'\r\n                })\r\n\r\n            }) .then (\r\n                (response) => response.json()\r\n            ) .then((data) => {\r\n                console.log(data)\r\n                // this.props.setToken(data.sessionToken)\r\n            }) .catch (( error) => \r\n                console.log(error)\r\n            )\r\n            // this.setState({\r\n            //     firstName: this.state.firstName;\r\n            //     lastName: this.state.lastName;\r\n            //     email: this.state.email;\r\n            //     password: this.state.password;\r\n            //     roles: this.state.roles;\r\n            // })\r\n\r\n        }\r\n\r\n        render() {\r\n            // const { classes } : any = this.props\r\n            // const onClickHandlerProps = { onClickHandler: this.props.onClickHandler}\r\n            return (\r\n                <form onSubmit={this.submitHandler}>\r\n                    <h1>Sign up here!</h1>\r\n                    <form  noValidate autoComplete=\"off\">            \r\n                    <input  placeholder=\"First Name\"\r\n                    value={this.state.firstName}\r\n                    onChange={e => this.setState({firstName: e.target.value})}\r\n                    required/>\r\n\r\n                    <input placeholder=\"Last Name\"\r\n                    value={this.state.lastName}\r\n                    onChange={e => this.setState({lastName: e.target.value})}\r\n                    required/>\r\n\r\n                    <input placeholder=\"Email\"\r\n                    value={this.state.email}\r\n                    onChange={e => this.setState({ email: e.target.value})}\r\n                    required/>\r\n\r\n                    <input placeholder=\"Password\"\r\n                    value={this.state.password}\r\n                    onChange={e => this.setState({password: e.target.value})}\r\n                    required/>\r\n\r\n                    <input placeholder=\"User or Admin?\"\r\n                    value={this.state.role}\r\n                    onChange={e => this.setState({role: e.target.value})}\r\n                    required/>\r\n                    </form>\r\n                    <button>Click me to test me!</button>\r\n                </form>\r\n            )\r\n        }\r\n    \r\n}\r\n\r\nexport default Signup;","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\auth\\login.tsx",["76","77","78","79","80"],"// import classes from '*.module.css';\r\nimport React, {useState, Component, FormEvent} from 'react';\r\n\r\ninterface AuthState{\r\n    email: string,\r\n    password: string\r\n}\r\n\r\ninterface AuthProps{\r\n    // onClickHandler: any\r\n    setToken: (newToken: string) => void;\r\n}\r\n\r\nclass Login extends React.Component<AuthProps, AuthState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        }\r\n\r\n        this.submitHandler = this.submitHandler.bind(this);\r\n    }\r\n    submitHandler(e: FormEvent) {\r\n        e.preventDefault();\r\n        fetch(\"http://localhost:3000/user/login\", {\r\n            method: 'POST',\r\n            body: JSON.stringify({user: {email: this.state.email, password: this.state.password}}),\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        }) .then (\r\n            (response) => response.json()\r\n        ) .then((data) => {\r\n            this.props.setToken(\r\n                data.sessionToken\r\n            )\r\n        }) .catch (( error) =>\r\n            console.log(error)\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Login here!</h1>\r\n                <form onSubmit={this.submitHandler}>\r\n                    <input placeholder=\"Email\"\r\n                    value={this.state.email}\r\n                    onChange={e => this.setState({email: e.target.value})}\r\n                    required/>\r\n\r\n                    <input placeholder=\"Password\"\r\n                    value={this.state.password}\r\n                    type=\"password\"\r\n                    onChange={e => this.setState({password: e.target.value})}\r\n                    required/>\r\n                    <button>Click me to sign in!</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumCreate.tsx",["81","82"],"import React, { Component, FormEvent, SyntheticEvent } from \"react\";\r\n\r\ninterface ForumCreateState {\r\n  title: string;\r\n  main: string;\r\n  user: string;\r\n  date: string;\r\n}\r\n\r\ninterface ForumCreateProps {\r\n  // handleFormInput: ForumCreateProps\r\n  // value: ForumCreateProps\r\n  token: string;\r\n  fetchForum: () => void;\r\n  // handleForumDisplay: () => void\r\n}\r\n\r\nclass ForumCreate extends React.Component<ForumCreateProps, ForumCreateState> {\r\n  constructor(props: ForumCreateProps) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      main: \"\",\r\n      user: \"\",\r\n      date: \"\",\r\n      // token: this.props.token,\r\n    };\r\n\r\n    this.handleFormInput = this.handleFormInput.bind(this);\r\n  }\r\n  handleFormInput(e: FormEvent) {\r\n    e.preventDefault();\r\n    fetch(\"http://localhost:3000/forum/create\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        forum: {\r\n          title: this.state.title,\r\n          main: this.state.main,\r\n          user: this.state.user,\r\n          date: this.state.date,\r\n        },\r\n      }),\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `${localStorage.getItem(\"token\")}`,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        // ********** call fetchForum() as props  to call it so once user creates something it displays.\r\n        this.props.fetchForum();\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }\r\n  // logForum = () => {\r\n  //     console.log(this.state.title);\r\n  //     console.log(this.state.main);\r\n  //     console.log(this.state.user);\r\n  //     console.log(this.state.date);\r\n  // };\r\n\r\n  handleTitleInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: e.currentTarget.value });\r\n  };\r\n  handleMainInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ main: e.currentTarget.value });\r\n  };\r\n  handleUserInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ user: e.currentTarget.value });\r\n  };\r\n  handleDateInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ date: e.currentTarget.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Create your post here!</h3>\r\n        <h5>Please remember to be respectful in your posting.</h5>\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleTitleInput}\r\n          value={this.state.title}\r\n          placeholder=\"Title\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleMainInput}\r\n          value={this.state.main}\r\n          placeholder=\"Main\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleUserInput}\r\n          value={this.state.user}\r\n          placeholder=\"Enter your name here!\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleDateInput}\r\n          value={this.state.date}\r\n          placeholder=\"Today's date\"\r\n        />\r\n        <button\r\n          className=\"btn btn-large right\"\r\n          onClick={this.handleFormInput} // for some reason I had logForum here???????\r\n        >\r\n          Submit your post here!\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ForumCreate;\r\n","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumDisplay.tsx",["83","84"],"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumCard.tsx",["85","86"],"//On click, should call function that says \"yo, we're going back up to the top and gonna fire thread create\". Then will bubble thread create, into thread display, then down into thread card (which does the same as forum card duh).\r\nimport React, { useState, FormEvent } from 'react';\r\n\r\n\r\ninterface ForumDeleteState {\r\n    forums: []\r\n    mainId : string\r\n    // deleteForum: FormEvent\r\n}\r\n\r\ninterface ForumDeleteProps {\r\n    // handleFormDelete: FormEvent\r\n    // onClick: FormEvent\r\n    token: string\r\n    handleForumDisplay: () => Array<any>\r\n    fetchForum() : void\r\n}\r\n\r\ntype Forum = {\r\n    id: number;\r\n    mainId: string;\r\n    title: string;\r\n    main: string;\r\n    user: string;\r\n    date: string;\r\n}\r\n\r\nclass ForumCard extends React.Component<ForumDeleteProps, ForumDeleteState>{\r\n    constructor(props: ForumDeleteProps) {\r\n        super(props);\r\n        this.state = {\r\n            mainId: '',\r\n            forums: []\r\n            // deleteForum: //SOMETHING GOES HERE OBVI\r\n        };\r\n\r\n        this.handleFormDelete = this.handleFormDelete.bind(this)\r\n    }\r\n        handleFormDelete(e: FormEvent) {\r\n            e.preventDefault();\r\n            fetch(`http://localhost:3000/forum/delete/${this.state.mainId}`, {\r\n                method: 'DELETE',\r\n                body: JSON.stringify({forum: {mainId: this.state.mainId}}),\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': this.props.token,\r\n                })\r\n            }) \r\n            // .then(() => this.state.deleteForum());\r\n        }\r\n\r\n        render() {\r\n            return(\r\n                <div>\r\n                    <div>\r\n                        {/* {this.props.handleFormDisplay()} */}\r\n                        {/*   */}\r\n                    </div>\r\n                    <button\r\n                        className=\"btn btn-large\"\r\n                        onClick={this.handleFormDelete}\r\n                        >\r\n                            I am a button.\r\n                    </button>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\nexport default ForumCard\r\n\r\n\r\n\r\n// TRISTAN OSHER (sp) TAYLOR REC FROM LEARNING GYM\r\n\r\n// REMEMBER SEAN DWYER ","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumEdit.tsx",["87","88"],"import React, { useState, FormEvent } from 'react';\r\n\r\ninterface AuthState{\r\n    title: string,\r\n    main: string,\r\n    // testExample: Array<{\r\n    //     thing: string\r\n    // }>\r\n}\r\n\r\ninterface ForumEditProps{\r\n    // handleFormEdit(e: FormEvent) : void\r\n    fetchForum: () => void\r\n    // value: FormEvent\r\n    // fetchForum: () => void\r\n    token: string \r\n    // editRes: FormEvent\r\n    updateOff: () => void\r\n    updateMyForum: any\r\n}\r\n\r\nclass ForumEdit extends React.Component<ForumEditProps, AuthState>{\r\n    constructor(props: ForumEditProps) {\r\n        super(props);\r\n        this.state = {\r\n            title: this.props.updateMyForum.title,\r\n            main: this.props.updateMyForum.main,\r\n            // testExample: []\r\n            \r\n            \r\n        };\r\n\r\n        this.handleFormEdit = this.handleFormEdit.bind(this)\r\n    }\r\n        handleFormEdit(e: FormEvent) {\r\n            console.log(this.props.token);\r\n            e.preventDefault();\r\n            fetch(`http://localhost:3000/forum/update/${this.props.updateMyForum.id}`, {\r\n                method: 'PUT',\r\n                body: JSON.stringify({forum: {title: this.state.title, main: this.state.main}}),\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `${localStorage.getItem('token')}`\r\n                })\r\n            }) .then((res) => {this.props.fetchForum(); this.props.updateOff()});\r\n        }\r\n        handleTitleEdit = (e: React.FormEvent<HTMLInputElement>): void => {\r\n            this.setState({ title: e.currentTarget.value});\r\n        }\r\n        handleMainEdit = (e: React.FormEvent<HTMLInputElement>): void => {\r\n            this.setState({ main: e.currentTarget.value })\r\n        }\r\n\r\n        render() {\r\n            return(\r\n                <div>\r\n                    <form onSubmit={this.handleFormEdit}>\r\n\r\n                    <h3>Edit your post here!</h3>\r\n                    <h5>`(Pssst, no need to be embarrassed, but we would probably change that too)`</h5>\r\n                    <input type=\"text\"\r\n                    onChange={this.handleTitleEdit}\r\n                    value={this.state.title}\r\n                    placeholder=\"Edit your title\"\r\n                    />\r\n                    <input type=\"text\"\r\n                    onChange={this.handleMainEdit}\r\n                    value={this.state.main}\r\n                    placeholder=\"Edit your body\"\r\n                    />\r\n                    <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-large right\"\r\n                    >\r\n                        Submit your edit here! \r\n                    </button>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\nexport default ForumEdit","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\threadDisplay.tsx",["89","90"],"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\threadCreate.tsx",["91","92"],"import React, { Component, FormEvent, SyntheticEvent } from \"react\";\r\n\r\ninterface ThreadCreateState {\r\n  title: string;\r\n  main: string;\r\n  user: string;\r\n  date: string;\r\n}\r\n\r\ninterface ThreadCreateProps {\r\n  // handleThreadInput: ForumCreateProps\r\n  // value: ThreadCreateProps\r\n  token: string;\r\n  fetchThread: () => void;\r\n  // handleThreadDisplay: () => void\r\n}\r\n\r\nclass ThreadCreate extends React.Component<\r\n  ThreadCreateProps,\r\n  ThreadCreateState\r\n> {\r\n  constructor(props: ThreadCreateProps) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      main: \"\",\r\n      user: \"\",\r\n      date: \"\",\r\n      // token: this.props.token,\r\n    };\r\n\r\n    this.handleThreadInput = this.handleThreadInput.bind(this);\r\n  }\r\n  handleThreadInput(e: FormEvent) {\r\n    e.preventDefault();\r\n    fetch(\"http://localhost:3000/thread/create\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        thread: {\r\n          title: this.state.title,\r\n          main: this.state.main,\r\n          user: this.state.user,\r\n          date: this.state.date,\r\n        },\r\n      }),\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `${localStorage.getItem(\"token\")}`,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        this.props.fetchThread();\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }\r\n  // logThread = () => {\r\n  //     console.log(this.state.title);\r\n  //     console.log(this.state.main);\r\n  //     console.log(this.state.user);\r\n  //     console.log(this.state.date);\r\n  // };\r\n\r\n  handleThreadTitleInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: e.currentTarget.value });\r\n  };\r\n  handleThreadMainInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ main: e.currentTarget.value });\r\n  };\r\n  handleThreadUserInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ user: e.currentTarget.value });\r\n  };\r\n  handleThreadDateInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ date: e.currentTarget.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Create your post here!</h3>\r\n        <h5>Please remember to be respectful in your posting.</h5>\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleThreadTitleInput}\r\n          value={this.state.title}\r\n          placeholder=\"Title\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleThreadMainInput}\r\n          value={this.state.main}\r\n          placeholder=\"Main\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleThreadUserInput}\r\n          value={this.state.user}\r\n          placeholder=\"Enter your name here! (Only cowards talk shit anonymously)!\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleThreadDateInput}\r\n          value={this.state.date}\r\n          placeholder=\"Today's date\"\r\n        />\r\n        <button\r\n          className=\"btn btn-large right\"\r\n          onClick={this.handleThreadInput} // for some reason I had logForum here???????\r\n        >\r\n          Submit your post here!\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThreadCreate;\r\n","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\ThreadCard.tsx",["93","94"],"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\ThreadEdit.tsx",["95"],"// NEW VV\r\n\r\nimport React, { useState, FormEvent } from \"react\";\r\n\r\ninterface AuthState {\r\n  title: string;\r\n  main: string;\r\n  // testExample: Array<{\r\n  //     thing: string\r\n  // }>\r\n}\r\n\r\ninterface ThreadEditProps {\r\n  fetchThread: () => void;\r\n\r\n  token: string;\r\n\r\n  updateOff: () => void;\r\n  updateMyThread: any;\r\n}\r\n\r\nclass ThreadEdit extends React.Component<ThreadEditProps, AuthState> {\r\n  constructor(props: ThreadEditProps) {\r\n    super(props);\r\n    this.state = {\r\n      title: this.props.updateMyThread.title,\r\n      main: this.props.updateMyThread.main,\r\n      // testExample: []\r\n    };\r\n\r\n    this.handleThreadEdit = this.handleThreadEdit.bind(this);\r\n  }\r\n  handleThreadEdit(e: FormEvent) {\r\n    console.log(this.props.token);\r\n    e.preventDefault();\r\n    fetch(\r\n      `http://localhost:3000/thread/update/${this.props.updateMyThread.id}`,\r\n      {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({\r\n          thread: { title: this.state.title, main: this.state.main },\r\n        }),\r\n        headers: new Headers({\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `${localStorage.getItem(\"token\")}`,\r\n        }),\r\n      }\r\n    ).then((res) => {\r\n      this.props.fetchThread();\r\n      this.props.updateOff();\r\n    });\r\n  }\r\n  handleThreadTitleEdit = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: e.currentTarget.value });\r\n  };\r\n  handleThreadMainEdit = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ main: e.currentTarget.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleThreadEdit}>\r\n          <h3>Edit your comment here!</h3>\r\n          <h5>\r\n            `(Pssst, no need to be embarrassed, but we would probably change\r\n            that too)`\r\n          </h5>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleThreadTitleEdit}\r\n            value={this.state.title}\r\n            placeholder=\"Edit your title\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleThreadMainEdit}\r\n            value={this.state.main}\r\n            placeholder=\"Edit your body (I mean the body of your comment, not your ACTUAL body. Chillout with that thought)\"\r\n          />\r\n          <button type=\"submit\" className=\"btn btn-large right\">\r\n            Submit your edit here!\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThreadEdit;\r\n",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":1,"column":16,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},{"ruleId":"100","severity":1,"message":"104","line":1,"column":16,"nodeType":"102","messageId":"103","endLine":1,"endColumn":24},{"ruleId":"100","severity":1,"message":"101","line":1,"column":26,"nodeType":"102","messageId":"103","endLine":1,"endColumn":35},{"ruleId":"100","severity":1,"message":"105","line":3,"column":9,"nodeType":"102","messageId":"103","endLine":3,"endColumn":18},{"ruleId":"106","severity":1,"message":"107","line":35,"column":13,"nodeType":"108","messageId":"109","endLine":47,"endColumn":22,"fix":"110"},{"ruleId":"106","severity":1,"message":"111","line":35,"column":13,"nodeType":"108","messageId":"109","endLine":44,"endColumn":20,"fix":"112"},{"ruleId":"106","severity":1,"message":"111","line":35,"column":13,"nodeType":"108","messageId":"109","endLine":42,"endColumn":21,"fix":"113"},{"ruleId":"100","severity":1,"message":"104","line":2,"column":16,"nodeType":"102","messageId":"103","endLine":2,"endColumn":24},{"ruleId":"100","severity":1,"message":"101","line":2,"column":26,"nodeType":"102","messageId":"103","endLine":2,"endColumn":35},{"ruleId":"106","severity":1,"message":"107","line":27,"column":9,"nodeType":"108","messageId":"109","endLine":39,"endColumn":18,"fix":"114"},{"ruleId":"106","severity":1,"message":"111","line":27,"column":9,"nodeType":"108","messageId":"109","endLine":35,"endColumn":16,"fix":"115"},{"ruleId":"106","severity":1,"message":"111","line":27,"column":9,"nodeType":"108","messageId":"109","endLine":33,"endColumn":17,"fix":"116"},{"ruleId":"100","severity":1,"message":"101","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":26},{"ruleId":"100","severity":1,"message":"117","line":1,"column":39,"nodeType":"102","messageId":"103","endLine":1,"endColumn":53},{"ruleId":"100","severity":1,"message":"104","line":6,"column":17,"nodeType":"102","messageId":"103","endLine":6,"endColumn":25},{"ruleId":"100","severity":1,"message":"118","line":6,"column":27,"nodeType":"102","messageId":"103","endLine":6,"endColumn":36},{"ruleId":"100","severity":1,"message":"104","line":2,"column":17,"nodeType":"102","messageId":"103","endLine":2,"endColumn":25},{"ruleId":"100","severity":1,"message":"119","line":19,"column":6,"nodeType":"102","messageId":"103","endLine":19,"endColumn":11},{"ruleId":"100","severity":1,"message":"104","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":25},{"ruleId":"106","severity":1,"message":"111","line":38,"column":13,"nodeType":"108","messageId":"109","endLine":45,"endColumn":21,"fix":"120"},{"ruleId":"100","severity":1,"message":"104","line":6,"column":17,"nodeType":"102","messageId":"103","endLine":6,"endColumn":25},{"ruleId":"100","severity":1,"message":"118","line":6,"column":27,"nodeType":"102","messageId":"103","endLine":6,"endColumn":36},{"ruleId":"100","severity":1,"message":"101","line":1,"column":17,"nodeType":"102","messageId":"103","endLine":1,"endColumn":26},{"ruleId":"100","severity":1,"message":"117","line":1,"column":39,"nodeType":"102","messageId":"103","endLine":1,"endColumn":53},{"ruleId":"100","severity":1,"message":"104","line":2,"column":17,"nodeType":"102","messageId":"103","endLine":2,"endColumn":25},{"ruleId":"100","severity":1,"message":"121","line":18,"column":6,"nodeType":"102","messageId":"103","endLine":18,"endColumn":12},{"ruleId":"100","severity":1,"message":"104","line":3,"column":17,"nodeType":"102","messageId":"103","endLine":3,"endColumn":25},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'TextField' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property catch.","MemberExpression","unexpectedWhitespace",{"range":"124","text":"125"},"Unexpected whitespace before property then.",{"range":"126","text":"125"},{"range":"127","text":"125"},{"range":"128","text":"125"},{"range":"129","text":"125"},{"range":"130","text":"125"},"'SyntheticEvent' is defined but never used.","'FormEvent' is defined but never used.","'Forum' is defined but never used.",{"range":"131","text":"125"},"'Thread' is defined but never used.","no-global-assign","no-unsafe-negation",[1479,1481],".",[1351,1353],[1281,1283],[1080,1082],[966,968],[904,906],[1389,1391]]