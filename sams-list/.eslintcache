[{"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\index.tsx":"1","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\reportWebVitals.ts":"2","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\App.tsx":"3","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\auth\\auth.tsx":"4","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\auth\\signup.tsx":"5","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\auth\\login.tsx":"6","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumCreate.tsx":"7","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumDisplay.tsx":"8","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumCard.tsx":"9","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumEdit.tsx":"10","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\threadDisplay.tsx":"11","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\threadCreate.tsx":"12","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\ThreadCard.tsx":"13","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\ThreadEdit.tsx":"14","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\helpers\\environment.js":"15"},{"size":500,"mtime":499162500000,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":1619,"mtime":1609982187820,"results":"19","hashOfConfig":"17"},{"size":847,"mtime":1610408766812,"results":"20","hashOfConfig":"17"},{"size":3485,"mtime":1610509086722,"results":"21","hashOfConfig":"17"},{"size":1934,"mtime":1610509032083,"results":"22","hashOfConfig":"17"},{"size":3345,"mtime":1610509192238,"results":"23","hashOfConfig":"17"},{"size":8889,"mtime":1610509242207,"results":"24","hashOfConfig":"17"},{"size":2258,"mtime":1610509155835,"results":"25","hashOfConfig":"17"},{"size":2839,"mtime":1610509306414,"results":"26","hashOfConfig":"17"},{"size":4653,"mtime":1610509421651,"results":"27","hashOfConfig":"17"},{"size":3358,"mtime":1610509366390,"results":"28","hashOfConfig":"17"},{"size":1817,"mtime":1610509327999,"results":"29","hashOfConfig":"17"},{"size":2512,"mtime":1610509455310,"results":"30","hashOfConfig":"17"},{"size":311,"mtime":1610508863988,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"13247cg",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\index.tsx",[],["76","77"],"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\reportWebVitals.ts",[],"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\App.tsx",["78"],"import React, {Component} from 'react';\nimport './App.css';\n// import Signup from \"./components/auth/signup\"\nimport Auth from \"./components/auth/auth\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\ninterface AppState {\n  token: string \n}\n\nclass App extends React.Component <{}, AppState>{\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      token: ''\n    }\n      this.setToken = this.setToken.bind(this)\n  } \n    setToken= (newToken: string) => {\n      // setp 1, getItem() from storage\n      const localToken = localStorage.getItem('token')\n      // step 2. check to see if there IS an item\n      // if(localToken){\n        console.log(localToken)\n        localStorage.setItem('token', newToken)    \n        this.setState({token: newToken})\n      // }\n      // step 3. setItem() -- set the token or locate token in the browser\n      // step 4. set state (look below V)\n    }\n  render(){\n    // const tokenProps ={token: this.state.token}\n    return (\n      <div className=\"App\">\n        <Router>\n          <div>\n            <ul>\n              <li><Link to='/'>Auth</Link></li>\n              \n            </ul>\n          </div>\n        <hr />\n        <Switch>\n          <Route exact path='/'>\n            <Auth setToken={this.setToken} token={this.state.token}/>\n          </Route>\n          <Route exact path='/home'>\n          </Route>\n        </Switch>\n        </Router>\n\n        {/* <header className=\"App-header\">\n          <p>{this.state.token}</p>\n          <Auth {...tokenProps} />\n        </header> */}\n      </div>\n    );\n  }\n}\n\nexport default App","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\auth\\auth.tsx",[],"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\auth\\signup.tsx",["79","80","81","82","83","84"],"import React, {useState, Component, FormEvent} from 'react';\r\n// import { isConstructorDeclaration } from 'typescript';\r\nimport {TextField} from '@material-ui/core'\r\nimport APIURL from '../../helpers/environment';\r\n\r\n// type AuthState = { onClickHandler: React.FC }\r\ninterface AuthState{\r\n    firstName: string,\r\n    lastName: string,\r\n    email: string,\r\n    password: string,\r\n    role: string\r\n}\r\n\r\ninterface Props{\r\n    // onClickHandler: any\r\n    // classes: any,\r\n    // setToken : any\r\n}\r\nclass Signup extends React.Component<{}, AuthState> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            role: ''\r\n        }\r\n\r\n        this.submitHandler = this.submitHandler.bind(this);\r\n    }\r\n        submitHandler(e: FormEvent) {\r\n            e.preventDefault();\r\n            fetch(`${APIURL}/user/create`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({user: {firstName: this.state.firstName, lastName: this.state.lastName, email: this.state.email, password: this.state.password, role: this.state.role }}),\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json'\r\n                })\r\n\r\n            }) .then (\r\n                (response) => response.json()\r\n            ) .then((data) => {\r\n                console.log(data)\r\n                // this.props.setToken(data.sessionToken)\r\n            }) .catch (( error) => \r\n                console.log(error)\r\n            )\r\n            // this.setState({\r\n            //     firstName: this.state.firstName;\r\n            //     lastName: this.state.lastName;\r\n            //     email: this.state.email;\r\n            //     password: this.state.password;\r\n            //     roles: this.state.roles;\r\n            // })\r\n\r\n        }\r\n\r\n        render() {\r\n            // const { classes } : any = this.props\r\n            // const onClickHandlerProps = { onClickHandler: this.props.onClickHandler}\r\n            return (\r\n                <form onSubmit={this.submitHandler}>\r\n                    <h1>Sign up here!</h1>\r\n                    <form  noValidate autoComplete=\"off\">            \r\n                    <input  placeholder=\"First Name\"\r\n                    value={this.state.firstName}\r\n                    onChange={e => this.setState({firstName: e.target.value})}\r\n                    required/>\r\n\r\n                    <input placeholder=\"Last Name\"\r\n                    value={this.state.lastName}\r\n                    onChange={e => this.setState({lastName: e.target.value})}\r\n                    required/>\r\n\r\n                    <input placeholder=\"Email\"\r\n                    value={this.state.email}\r\n                    onChange={e => this.setState({ email: e.target.value})}\r\n                    required/>\r\n\r\n                    <input placeholder=\"Password\"\r\n                    value={this.state.password}\r\n                    onChange={e => this.setState({password: e.target.value})}\r\n                    required/>\r\n\r\n                    <input placeholder=\"User or Admin?\"\r\n                    value={this.state.role}\r\n                    onChange={e => this.setState({role: e.target.value})}\r\n                    required/>\r\n                    </form>\r\n                    <button>Click me to test me!</button>\r\n                </form>\r\n            )\r\n        }\r\n    \r\n}\r\n\r\nexport default Signup;","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\auth\\login.tsx",["85","86","87","88","89"],"// import classes from '*.module.css';\r\nimport React, {useState, Component, FormEvent} from 'react';\r\nimport APIURL from '../../helpers/environment';\r\n\r\ninterface AuthState{\r\n    email: string,\r\n    password: string\r\n}\r\n\r\ninterface AuthProps{\r\n    // onClickHandler: any\r\n    setToken: (newToken: string) => void;\r\n}\r\n\r\nclass Login extends React.Component<AuthProps, AuthState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        }\r\n\r\n        this.submitHandler = this.submitHandler.bind(this);\r\n    }\r\n    submitHandler(e: FormEvent) {\r\n        e.preventDefault();\r\n        fetch(`${APIURL}/user/login`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({user: {email: this.state.email, password: this.state.password}}),\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        }) .then (\r\n            (response) => response.json()\r\n        ) .then((data) => {\r\n            this.props.setToken(\r\n                data.sessionToken\r\n            )\r\n        }) .catch (( error) =>\r\n            console.log(error)\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Login here!</h1>\r\n                <form onSubmit={this.submitHandler}>\r\n                    <input placeholder=\"Email\"\r\n                    value={this.state.email}\r\n                    onChange={e => this.setState({email: e.target.value})}\r\n                    required/>\r\n\r\n                    <input placeholder=\"Password\"\r\n                    value={this.state.password}\r\n                    type=\"password\"\r\n                    onChange={e => this.setState({password: e.target.value})}\r\n                    required/>\r\n                    <button>Click me to sign in!</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumCreate.tsx",["90","91"],"import React, { Component, FormEvent, SyntheticEvent } from \"react\";\r\nimport APIURL from '../../helpers/environment';\r\n\r\ninterface ForumCreateState {\r\n  title: string;\r\n  main: string;\r\n  user: string;\r\n  date: string;\r\n}\r\n\r\ninterface ForumCreateProps {\r\n  // handleFormInput: ForumCreateProps\r\n  // value: ForumCreateProps\r\n  token: string;\r\n  fetchForum: () => void;\r\n  // handleForumDisplay: () => void\r\n}\r\n\r\nclass ForumCreate extends React.Component<ForumCreateProps, ForumCreateState> {\r\n  constructor(props: ForumCreateProps) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      main: \"\",\r\n      user: \"\",\r\n      date: \"\",\r\n      // token: this.props.token,\r\n    };\r\n\r\n    this.handleFormInput = this.handleFormInput.bind(this);\r\n  }\r\n  handleFormInput(e: FormEvent) {\r\n    e.preventDefault();\r\n    fetch(`${APIURL}/forum/create`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        forum: {\r\n          title: this.state.title,\r\n          main: this.state.main,\r\n          user: this.state.user,\r\n          date: this.state.date,\r\n        },\r\n      }),\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `${localStorage.getItem(\"token\")}`,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        // ********** call fetchForum() as props  to call it so once user creates something it displays.\r\n        this.props.fetchForum();\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }\r\n  // logForum = () => {\r\n  //     console.log(this.state.title);\r\n  //     console.log(this.state.main);\r\n  //     console.log(this.state.user);\r\n  //     console.log(this.state.date);\r\n  // };\r\n\r\n  handleTitleInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: e.currentTarget.value });\r\n  };\r\n  handleMainInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ main: e.currentTarget.value });\r\n  };\r\n  handleUserInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ user: e.currentTarget.value });\r\n  };\r\n  handleDateInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ date: e.currentTarget.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Create your post here!</h3>\r\n        <h5>Please remember to be respectful in your posting.</h5>\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleTitleInput}\r\n          value={this.state.title}\r\n          placeholder=\"Title\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleMainInput}\r\n          value={this.state.main}\r\n          placeholder=\"Main\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleUserInput}\r\n          value={this.state.user}\r\n          placeholder=\"Enter your name here!\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleDateInput}\r\n          value={this.state.date}\r\n          placeholder=\"Today's date\"\r\n        />\r\n        <button\r\n          className=\"btn btn-large right\"\r\n          onClick={this.handleFormInput} // for some reason I had logForum here???????\r\n        >\r\n          Submit your post here!\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ForumCreate;\r\n","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumDisplay.tsx",["92","93"],"// NOTE THAT THE GET ALL FOR MY FORUMS IS \"/\"\r\n\r\n// THIS IS NOW PARENT OF CREATE DELETE EDIT (FORUM)\r\n\r\n// import userEvent from '@testing-library/user-event';\r\nimport React, { useState, FormEvent } from \"react\";\r\nimport ForumCreate from \"./forumCreate\";\r\nimport ForumCard from \"./forumCard\";\r\nimport ForumEdit from \"./forumEdit\";\r\nimport ThreadShowAll from \"../thread/threadDisplay\";\r\nimport APIURL from '../../helpers/environment';\r\n\r\ninterface ForumShowAllState {\r\n  forums: [];\r\n  mainId: string;\r\n  title: string;\r\n  main: string;\r\n  user: string;\r\n  date: string;\r\n  forumUpdate: any;\r\n  setUpdateActive: boolean;\r\n}\r\n\r\ninterface ForumShowAllProps {\r\n  token: string;\r\n  // editRes: FormEvent\r\n}\r\n\r\ntype Forum = {\r\n  id: number;\r\n  mainId: string;\r\n  title: string;\r\n  main: string;\r\n  user: string;\r\n  date: string;\r\n};\r\n// make type for forum, then plug in as annotation (instead of :any)\r\nclass ForumShowAll extends React.Component<\r\n  ForumShowAllProps,\r\n  ForumShowAllState\r\n> {\r\n  constructor(props: ForumShowAllProps) {\r\n    super(props);\r\n    this.state = {\r\n      forums: [],\r\n      mainId: \"\",\r\n      title: \"\",\r\n      main: \"\",\r\n      user: \"\",\r\n      date: \"\",\r\n      forumUpdate: {},\r\n      setUpdateActive: false,\r\n    };\r\n    this.handleFormDisplay = this.handleFormDisplay.bind(this);\r\n  }\r\n  //could be type annotations, or index?\r\n  //map method, obj mapping over and key (most ppl put index)\r\n\r\n  // index() {\r\n\r\n  // }\r\n  // handleFormEdit(e: FormEvent) {\r\n  //     e.preventDefault();\r\n  //     fetch(`http://localhost:3000/forum/update/${this.state.mainId}`, {\r\n  //         method: 'PUT',\r\n  //         body: JSON.stringify({forum: {title: this.state.title, main: this.state.main}}),\r\n  //         headers: new Headers({\r\n  //             'Content-Type': 'application/json',\r\n  //             'Authorization': this.props.token\r\n  //         })\r\n  //     }) .then((response) => response.json()\r\n  //     ) .then ((data) => {\r\n  //         console.log(data)\r\n  //     }) .catch ((error ) =>\r\n  //         console.log(error)\r\n  //     )\r\n  // }\r\n  // : Array<any> <--- NOTE FOR SAM: I HAD THIS NEXT TO PAREN below\r\n\r\n  updateMyForum = (forum: any) => {\r\n    this.setState({\r\n      forumUpdate: forum,\r\n    });\r\n  };\r\n\r\n  updateOn = () => {\r\n    this.setState({\r\n      setUpdateActive: true,\r\n    });\r\n  };\r\n\r\n  updateOff = () => {\r\n    this.setState({\r\n      setUpdateActive: false,\r\n    });\r\n  };\r\n  fetchForum() {\r\n    console.log(\"starting fetch for display\");\r\n    fetch(`${APIURL}/forum/`, {\r\n      method: \"GET\",\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": this.props.token,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        console.log(data.forums);\r\n        // this.state.forums.push(data.forums)\r\n        this.setState({ forums: data }); //userData.feed?? Grab token, then dive in to grab forum assoc w/ user\r\n      });\r\n    console.log(this.state.forums);\r\n    console.log(\"whole fetch is done\");\r\n  }\r\n  handleFormDelete(forum: any) {\r\n    fetch(`${APIURL}/forum/delete/${forum.id}`, {\r\n      method: \"DELETE\",\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `${localStorage.getItem(\"token\")}`,\r\n      }),\r\n    }).then(() => this.fetchForum());\r\n  }\r\n  handleFormDisplay = () => {\r\n    // console.log(\"display has been fired\")\r\n    return this.state.forums.map((forum: Forum) => {\r\n      //build if else statement passing forum id through\r\n      //so if .post contains comments\r\n      // console.log(\"display has been fired2\")\r\n      return (\r\n        <ul key={forum.mainId}>\r\n          <li>{forum.title}</li>\r\n          <li>{forum.main}</li>\r\n          <li>{forum.user}</li>\r\n          <li>{forum.date}</li>\r\n          {/* <li>{this.handleThreadDisplay}</li> */}\r\n          \r\n          <li>\r\n            <button\r\n              onClick={() => {\r\n                this.updateMyForum(forum);\r\n                this.updateOn();\r\n              }}\r\n            >\r\n              Edit\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button\r\n              onClick={() => {\r\n                this.handleFormDelete(forum);\r\n              }}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      );\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchForum();\r\n  }\r\n\r\n  // fetchForum() {\r\n  //     console.log(\"starting fetch for display\")\r\n  //     fetch(`http://localhost:3000/forum/`, {\r\n  //         method: 'GET',\r\n  //         headers: new Headers({\r\n  //             'Content-Type': 'application/json',\r\n  //             // 'Authorization': this.props.token,\r\n  //         }),\r\n  //     })\r\n  //     .then(res => res.json())\r\n  //     .then(data => {\r\n  //         console.log(data)\r\n  //         console.log(data.forums)\r\n  //         // this.state.forums.push(data.forums)\r\n  //         this.setState({ forums: data }); //userData.feed?? Grab token, then dive in to grab forum assoc w/ user\r\n  //     });\r\n  //     console.log(this.state.forums)\r\n  //     console.log(\"whole fetch is done\")\r\n  // }\r\n  // Maybe put Everything below in like a table or something for the display!?!?!?????\r\n\r\n  // handleTitleEdit = (e: React.FormEvent<HTMLInputElement>): void => {\r\n  //     this.setState({ title: e.currentTarget.value});\r\n  // }\r\n  // handleMainEdit = (e: React.FormEvent<HTMLInputElement>): void => {\r\n  //     this.setState({ main: e.currentTarget.value })\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        Sam's List\r\n        <h1>\r\n          Welcome! This is just some test to fill a spot right now. Don't read\r\n          too much into it, ya dummy!\r\n        </h1>\r\n        <div>\r\n          {this.handleFormDisplay()}\r\n          {/* {this.state.forums.map((forum: Forum) => (\r\n                            <ul key ={forum.id}>\r\n                                <li><h3>{forum}</h3></li>\r\n                                <li><h3>{forum.main}</h3></li>\r\n                                <li><h3>{forum.user}</h3></li>\r\n                                <li><h3>{forum.date}</h3></li>\r\n                            </ul>\r\n                        ))} */}\r\n        </div>{\" \"}\r\n        {/* NOTE FOR SAM. THIS IS PASSING DOWN VV */}\r\n        <ForumCreate\r\n          fetchForum={this.fetchForum.bind(this)}\r\n          token={this.props.token}\r\n        />\r\n        {/* {this.state.} */}\r\n        {/* <ForumEdit handleTitleEdit={this.handleTitleEdit.bind(this)} token={this.props.token}/> */}\r\n        <ForumCard\r\n          handleForumDisplay={this.handleFormDisplay}\r\n          fetchForum={this.fetchForum.bind(this)}\r\n          token={this.props.token}\r\n        />\r\n        {/* PASS IN DELETE, EDIT IN AS WELL. JUST LIKE FORUM CREATE WAS PASSED IN */}\r\n        {this.state.setUpdateActive ? (\r\n          <ForumEdit\r\n            updateOff={this.updateOff}\r\n            fetchForum={this.fetchForum.bind(this)}\r\n            token={this.props.token}\r\n            updateMyForum={this.state.forumUpdate}\r\n          />\r\n        ) : (\r\n          <></>\r\n        )}\r\n        <ThreadShowAll token={this.props.token} />\r\n      </div>\r\n      // *************** pass forumFetch as prop to forumCreate component (forumDisplay acts as Index)\r\n    );\r\n  }\r\n}\r\n\r\nexport default ForumShowAll;\r\n\r\n// assoc where include reply tab, then when include comes with replies for message,\r\n\r\n// essentially, a map within a map\r\n\r\n// feedMapper = () => {\r\n//     return this.state.dataTable.map((feeds: any, index) => {\r\n//         return(\r\n//             <div>\r\n//                 <Card\r\n//                     key={index}\r\n//                     id='postCard'\r\n//                     hoverable\r\n//                     cover={<img id='postImage' style={{ width: 300, height: 350 }} alt=\"user posted image\" src={feeds.image} />}\r\n//                 >\r\n//                     <p id='cardUname'>{feeds.userName}</p>\r\n//                     <p id='cardText'>{feeds.text}</p>\r\n//                     <p id='cardlink'><a target='blank'>{feeds.link}</a></p>\r\n//                     <Comments setUsername={this.props.setUserName} setComments={this.state.comment} token={this.props.token} fetchUsers={this.fetchUsers}/>\r\n//                 </Card>\r\n//             </div>\r\n//         )\r\n//     })\r\n// }\r\n\r\n// componentDidMount(){\r\n//     this.fetchFeeds();\r\n//     this.fetchUsers(this.state.dataTable);\r\n// }\r\n// render() {\r\n//     return(\r\n//         <div id='feedDiv'>\r\n//             <CreatePost setUsername={this.state.username} setImage={this.state.image} setText={this.state.text} setLink={this.state.link} fetchUsers={this.fetchFeeds} token={this.props.token} />\r\n//             <Container id='feedContainer'>\r\n//                 {this.feedMapper()}\r\n//             </Container>\r\n//             <Footer />\r\n//         </div>\r\n//     )\r\n// }\r\n","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumCard.tsx",["94","95"],"//On click, should call function that says \"yo, we're going back up to the top and gonna fire thread create\". Then will bubble thread create, into thread display, then down into thread card (which does the same as forum card duh).\r\nimport React, { useState, FormEvent } from 'react';\r\nimport APIURL from '../../helpers/environment';\r\n\r\n\r\ninterface ForumDeleteState {\r\n    forums: []\r\n    mainId : string\r\n    // deleteForum: FormEvent\r\n}\r\n\r\ninterface ForumDeleteProps {\r\n    // handleFormDelete: FormEvent\r\n    // onClick: FormEvent\r\n    token: string\r\n    handleForumDisplay: () => Array<any>\r\n    fetchForum() : void\r\n}\r\n\r\ntype Forum = {\r\n    id: number;\r\n    mainId: string;\r\n    title: string;\r\n    main: string;\r\n    user: string;\r\n    date: string;\r\n}\r\n\r\nclass ForumCard extends React.Component<ForumDeleteProps, ForumDeleteState>{\r\n    constructor(props: ForumDeleteProps) {\r\n        super(props);\r\n        this.state = {\r\n            mainId: '',\r\n            forums: []\r\n            // deleteForum: //SOMETHING GOES HERE OBVI\r\n        };\r\n\r\n        this.handleFormDelete = this.handleFormDelete.bind(this)\r\n    }\r\n        handleFormDelete(e: FormEvent) {\r\n            e.preventDefault();\r\n            fetch(`${APIURL}/forum/delete/${this.state.mainId}`, {\r\n                method: 'DELETE',\r\n                body: JSON.stringify({forum: {mainId: this.state.mainId}}),\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': this.props.token,\r\n                })\r\n            }) \r\n            // .then(() => this.state.deleteForum());\r\n        }\r\n\r\n        render() {\r\n            return(\r\n                <div>\r\n                    <div>\r\n                        {/* {this.props.handleFormDisplay()} */}\r\n                        {/*   */}\r\n                    </div>\r\n                    <button\r\n                        className=\"btn btn-large\"\r\n                        onClick={this.handleFormDelete}\r\n                        >\r\n                            I am a button.\r\n                    </button>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\nexport default ForumCard\r\n\r\n\r\n\r\n// TRISTAN OSHER (sp) TAYLOR REC FROM LEARNING GYM\r\n\r\n// REMEMBER SEAN DWYER ","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\forum\\forumEdit.tsx",["96","97"],"import React, { useState, FormEvent } from 'react';\r\nimport APIURL from '../../helpers/environment';\r\n\r\ninterface AuthState{\r\n    title: string,\r\n    main: string,\r\n    // testExample: Array<{\r\n    //     thing: string\r\n    // }>\r\n}\r\n\r\ninterface ForumEditProps{\r\n    // handleFormEdit(e: FormEvent) : void\r\n    fetchForum: () => void\r\n    // value: FormEvent\r\n    // fetchForum: () => void\r\n    token: string \r\n    // editRes: FormEvent\r\n    updateOff: () => void\r\n    updateMyForum: any\r\n}\r\n\r\nclass ForumEdit extends React.Component<ForumEditProps, AuthState>{\r\n    constructor(props: ForumEditProps) {\r\n        super(props);\r\n        this.state = {\r\n            title: this.props.updateMyForum.title,\r\n            main: this.props.updateMyForum.main,\r\n            // testExample: []\r\n            \r\n            \r\n        };\r\n\r\n        this.handleFormEdit = this.handleFormEdit.bind(this)\r\n    }\r\n        handleFormEdit(e: FormEvent) {\r\n            console.log(this.props.token);\r\n            e.preventDefault();\r\n            fetch(`${APIURL}/forum/update/${this.props.updateMyForum.id}`, {\r\n                method: 'PUT',\r\n                body: JSON.stringify({forum: {title: this.state.title, main: this.state.main}}),\r\n                headers: new Headers({\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `${localStorage.getItem('token')}`\r\n                })\r\n            }) .then((res) => {this.props.fetchForum(); this.props.updateOff()});\r\n        }\r\n        handleTitleEdit = (e: React.FormEvent<HTMLInputElement>): void => {\r\n            this.setState({ title: e.currentTarget.value});\r\n        }\r\n        handleMainEdit = (e: React.FormEvent<HTMLInputElement>): void => {\r\n            this.setState({ main: e.currentTarget.value })\r\n        }\r\n\r\n        render() {\r\n            return(\r\n                <div>\r\n                    <form onSubmit={this.handleFormEdit}>\r\n\r\n                    <h3>Edit your post here!</h3>\r\n                    <h5>`(Pssst, no need to be embarrassed, but we would probably change that too)`</h5>\r\n                    <input type=\"text\"\r\n                    onChange={this.handleTitleEdit}\r\n                    value={this.state.title}\r\n                    placeholder=\"Edit your title\"\r\n                    />\r\n                    <input type=\"text\"\r\n                    onChange={this.handleMainEdit}\r\n                    value={this.state.main}\r\n                    placeholder=\"Edit your body\"\r\n                    />\r\n                    <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-large right\"\r\n                    >\r\n                        Submit your edit here! \r\n                    </button>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n}\r\n\r\nexport default ForumEdit","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\threadDisplay.tsx",["98","99"],"// NOTE THAT THE GET ALL FOR MY FORUMS IS \"/\"\r\n\r\n// THIS IS NOW PARENT OF CREATE DELETE EDIT (FORUM)\r\n\r\n// import userEvent from '@testing-library/user-event';\r\nimport React, { useState, FormEvent } from \"react\";\r\nimport ThreadCreate from \"./threadCreate\";\r\nimport ThreadCard from \"./ThreadCard\";\r\nimport ThreadEdit from \"./ThreadEdit\";\r\nimport APIURL from '../../helpers/environment';\r\n\r\ninterface ThreadShowAllState {\r\n  threads: [];\r\n  mainId: string;\r\n  title: string;\r\n  main: string;\r\n  user: string;\r\n  date: string;\r\n  threadUpdate: any;\r\n  setUpdateActive: boolean;\r\n}\r\n\r\ninterface ThreadShowAllProps {\r\n  token: string;\r\n  // editRes: FormEvent\r\n}\r\n\r\ntype Thread = {\r\n  id: number;\r\n  mainId: string;\r\n  title: string;\r\n  main: string;\r\n  user: string;\r\n  date: string;\r\n};\r\n// make type for forum, then plug in as annotation (instead of :any)\r\nclass ThreadShowAll extends React.Component<\r\n  ThreadShowAllProps,\r\n  ThreadShowAllState\r\n> {\r\n  constructor(props: ThreadShowAllProps) {\r\n    super(props);\r\n    this.state = {\r\n      threads: [],\r\n      mainId: \"\",\r\n      title: \"\",\r\n      main: \"\",\r\n      user: \"\",\r\n      date: \"\",\r\n      threadUpdate: {},\r\n      setUpdateActive: false,\r\n    };\r\n    this.handleThreadDisplay = this.handleThreadDisplay.bind(this);\r\n  }\r\n  //could be type annotations, or index?\r\n  //map method, obj mapping over and key (most ppl put index)\r\n\r\n  updateMyThread = (thread: any) => {\r\n    this.setState({\r\n      threadUpdate: thread,\r\n    });\r\n  };\r\n\r\n  updateOn = () => {\r\n    this.setState({\r\n      setUpdateActive: true,\r\n    });\r\n  };\r\n\r\n  updateOff = () => {\r\n    this.setState({\r\n      setUpdateActive: false,\r\n    });\r\n  };\r\n  fetchThread() {\r\n    console.log(\"starting fetch for display thread\");\r\n    fetch(`${APIURL}/thread/`, {\r\n      method: \"GET\",\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": this.props.token,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        console.log(data.threads);\r\n        this.setState({ threads: data }); //userData.feed?? Grab token, then dive in to grab thread assoc w/ user\r\n      });\r\n    console.log(this.state.threads);\r\n    console.log(\"whole fetch is done\");\r\n  }\r\n  handleThreadDelete(thread: any) {\r\n    fetch(`${APIURL}/thread/delete/${thread.id}`, {\r\n      method: \"DELETE\",\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `${localStorage.getItem(\"token\")}`,\r\n      }),\r\n    })\r\n      .then(() => this.fetchThread())\r\n      .then(() => console.log(\"thread deleted\"));\r\n  }\r\n  handleThreadDisplay = () => {\r\n    // console.log(\"display has been fired\")\r\n    return this.state.threads.map((thread: Thread) => {\r\n      // console.log(\"display has been fired2\")\r\n      return (\r\n        <ul key={thread.mainId}>\r\n          <li>{thread.title}</li>\r\n          <li>{thread.main}</li>\r\n          <li>{thread.user}</li>\r\n          <li>{thread.date}</li>\r\n          <li>\r\n            <button\r\n              onClick={() => {\r\n                this.updateMyThread(thread);\r\n                this.updateOn();\r\n              }}\r\n            >\r\n              Edit\r\n            </button>\r\n          </li>\r\n          <li>\r\n            <button\r\n              onClick={() => {\r\n                this.handleThreadDelete(thread);\r\n              }}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      );\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchThread();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        Sam's List\r\n        <div>{this.handleThreadDisplay()}</div>{\" \"}\r\n        {/* NOTE FOR SAM. THIS IS PASSING DOWN VV */}\r\n        <ThreadCreate\r\n          fetchThread={this.fetchThread.bind(this)}\r\n          token={this.props.token}\r\n        />\r\n        {/* {this.state.} */}\r\n        {/* <ForumEdit handleTitleEdit={this.handleTitleEdit.bind(this)} token={this.props.token}/> */}\r\n        <ThreadCard\r\n          handleThreadDisplay={this.handleThreadDisplay}\r\n          fetchThread={this.fetchThread.bind(this)}\r\n          token={this.props.token}\r\n        />\r\n        {this.state.setUpdateActive ? (\r\n          <ThreadEdit\r\n            updateOff={this.updateOff}\r\n            fetchThread={this.fetchThread.bind(this)}\r\n            token={this.props.token}\r\n            updateMyThread={this.state.threadUpdate}\r\n          />\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n      // *************** pass forumFetch as prop to forumCreate component (forumDisplay acts as Index)\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThreadShowAll;\r\n","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\threadCreate.tsx",["100","101"],"import React, { Component, FormEvent, SyntheticEvent } from \"react\";\r\nimport APIURL from '../../helpers/environment';\r\n\r\ninterface ThreadCreateState {\r\n  title: string;\r\n  main: string;\r\n  user: string;\r\n  date: string;\r\n}\r\n\r\ninterface ThreadCreateProps {\r\n  // handleThreadInput: ForumCreateProps\r\n  // value: ThreadCreateProps\r\n  token: string;\r\n  fetchThread: () => void;\r\n  // handleThreadDisplay: () => void\r\n}\r\n\r\nclass ThreadCreate extends React.Component<\r\n  ThreadCreateProps,\r\n  ThreadCreateState\r\n> {\r\n  constructor(props: ThreadCreateProps) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      main: \"\",\r\n      user: \"\",\r\n      date: \"\",\r\n      // token: this.props.token,\r\n    };\r\n\r\n    this.handleThreadInput = this.handleThreadInput.bind(this);\r\n  }\r\n  handleThreadInput(e: FormEvent) {\r\n    e.preventDefault();\r\n    fetch(`${APIURL}/thread/create`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        thread: {\r\n          title: this.state.title,\r\n          main: this.state.main,\r\n          user: this.state.user,\r\n          date: this.state.date,\r\n        },\r\n      }),\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `${localStorage.getItem(\"token\")}`,\r\n      }),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        this.props.fetchThread();\r\n      })\r\n      .catch((error) => console.log(error));\r\n  }\r\n  // logThread = () => {\r\n  //     console.log(this.state.title);\r\n  //     console.log(this.state.main);\r\n  //     console.log(this.state.user);\r\n  //     console.log(this.state.date);\r\n  // };\r\n\r\n  handleThreadTitleInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: e.currentTarget.value });\r\n  };\r\n  handleThreadMainInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ main: e.currentTarget.value });\r\n  };\r\n  handleThreadUserInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ user: e.currentTarget.value });\r\n  };\r\n  handleThreadDateInput = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ date: e.currentTarget.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Create your post here!</h3>\r\n        <h5>Please remember to be respectful in your posting.</h5>\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleThreadTitleInput}\r\n          value={this.state.title}\r\n          placeholder=\"Title\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleThreadMainInput}\r\n          value={this.state.main}\r\n          placeholder=\"Main\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleThreadUserInput}\r\n          value={this.state.user}\r\n          placeholder=\"Enter your name here! (Only cowards talk shit anonymously)!\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={this.handleThreadDateInput}\r\n          value={this.state.date}\r\n          placeholder=\"Today's date\"\r\n        />\r\n        <button\r\n          className=\"btn btn-large right\"\r\n          onClick={this.handleThreadInput} // for some reason I had logForum here???????\r\n        >\r\n          Submit your post here!\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThreadCreate;\r\n","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\ThreadCard.tsx",["102","103"],"//On click, should call function that says \"yo, we're going back up to the top and gonna fire thread create\". Then will bubble thread create, into thread display, then down into thread card (which does the same as forum card duh).\r\nimport React, { useState, FormEvent } from \"react\";\r\nimport APIURL from '../../helpers/environment';\r\n\r\ninterface ThreadDeleteState {\r\n  threads: [];\r\n  mainId: string;\r\n  // deleteForum: FormEvent\r\n}\r\n\r\ninterface ThreadDeleteProps {\r\n  // handleFormDelete: FormEvent\r\n  // onClick: FormEvent\r\n  token: string;\r\n  handleThreadDisplay: () => Array<any>;\r\n  fetchThread(): void;\r\n}\r\n\r\ntype Thread = {\r\n  id: number;\r\n  mainId: string;\r\n  title: string;\r\n  main: string;\r\n  user: string;\r\n  date: string;\r\n};\r\n\r\nclass ThreadCard extends React.Component<ThreadDeleteProps, ThreadDeleteState> {\r\n  constructor(props: ThreadDeleteProps) {\r\n    super(props);\r\n    this.state = {\r\n      mainId: \"\",\r\n      threads: [],\r\n      // deleteForum: //SOMETHING GOES HERE OBVI\r\n    };\r\n\r\n    this.handleThreadDelete = this.handleThreadDelete.bind(this);\r\n  }\r\n  handleThreadDelete(e: FormEvent) {\r\n    e.preventDefault();\r\n    fetch(`${APIURL}/thread/delete/${this.state.mainId}`, {\r\n      method: \"DELETE\",\r\n      body: JSON.stringify({ forum: { mainId: this.state.mainId } }),\r\n      headers: new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": this.props.token,\r\n      }),\r\n    });\r\n    // .then(() => this.state.deleteForum());\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          {/* {this.props.handleFormDisplay()} */}\r\n          {/*   */}\r\n        </div>\r\n        <button className=\"btn btn-large\" onClick={this.handleThreadDelete}>\r\n          I am a button.\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThreadCard;\r\n","C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\components\\thread\\ThreadEdit.tsx",["104"],"// NEW VV\r\n\r\nimport React, { useState, FormEvent } from \"react\";\r\nimport APIURL from '../../helpers/environment';\r\n\r\ninterface AuthState {\r\n  title: string;\r\n  main: string;\r\n  // testExample: Array<{\r\n  //     thing: string\r\n  // }>\r\n}\r\n\r\ninterface ThreadEditProps {\r\n  fetchThread: () => void;\r\n\r\n  token: string;\r\n\r\n  updateOff: () => void;\r\n  updateMyThread: any;\r\n}\r\n\r\nclass ThreadEdit extends React.Component<ThreadEditProps, AuthState> {\r\n  constructor(props: ThreadEditProps) {\r\n    super(props);\r\n    this.state = {\r\n      title: this.props.updateMyThread.title,\r\n      main: this.props.updateMyThread.main,\r\n      // testExample: []\r\n    };\r\n\r\n    this.handleThreadEdit = this.handleThreadEdit.bind(this);\r\n  }\r\n  handleThreadEdit(e: FormEvent) {\r\n    console.log(this.props.token);\r\n    e.preventDefault();\r\n    fetch(\r\n      `${APIURL}/thread/update/${this.props.updateMyThread.id}`,\r\n      {\r\n        method: \"PUT\",\r\n        body: JSON.stringify({\r\n          thread: { title: this.state.title, main: this.state.main },\r\n        }),\r\n        headers: new Headers({\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `${localStorage.getItem(\"token\")}`,\r\n        }),\r\n      }\r\n    ).then((res) => {\r\n      this.props.fetchThread();\r\n      this.props.updateOff();\r\n    });\r\n  }\r\n  handleThreadTitleEdit = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ title: e.currentTarget.value });\r\n  };\r\n  handleThreadMainEdit = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    this.setState({ main: e.currentTarget.value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleThreadEdit}>\r\n          <h3>Edit your comment here!</h3>\r\n          <h5>\r\n            `(Pssst, no need to be embarrassed, but we would probably change\r\n            that too)`\r\n          </h5>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleThreadTitleEdit}\r\n            value={this.state.title}\r\n            placeholder=\"Edit your title\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleThreadMainEdit}\r\n            value={this.state.main}\r\n            placeholder=\"Edit your body (I mean the body of your comment, not your ACTUAL body. Chillout with that thought)\"\r\n          />\r\n          <button type=\"submit\" className=\"btn btn-large right\">\r\n            Submit your edit here!\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThreadEdit;\r\n",["105","106"],"C:\\Users\\Maxwell\\Desktop\\WDOctober2020\\javascriptLibrary\\RedBadge2020\\samlist-client\\sams-list\\src\\helpers\\environment.js",[],["107","108"],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":1,"column":16,"nodeType":"115","messageId":"116","endLine":1,"endColumn":25},{"ruleId":"113","severity":1,"message":"117","line":1,"column":16,"nodeType":"115","messageId":"116","endLine":1,"endColumn":24},{"ruleId":"113","severity":1,"message":"114","line":1,"column":26,"nodeType":"115","messageId":"116","endLine":1,"endColumn":35},{"ruleId":"113","severity":1,"message":"118","line":3,"column":9,"nodeType":"115","messageId":"116","endLine":3,"endColumn":18},{"ruleId":"119","severity":1,"message":"120","line":36,"column":13,"nodeType":"121","messageId":"122","endLine":48,"endColumn":22,"fix":"123"},{"ruleId":"119","severity":1,"message":"124","line":36,"column":13,"nodeType":"121","messageId":"122","endLine":45,"endColumn":20,"fix":"125"},{"ruleId":"119","severity":1,"message":"124","line":36,"column":13,"nodeType":"121","messageId":"122","endLine":43,"endColumn":21,"fix":"126"},{"ruleId":"113","severity":1,"message":"117","line":2,"column":16,"nodeType":"115","messageId":"116","endLine":2,"endColumn":24},{"ruleId":"113","severity":1,"message":"114","line":2,"column":26,"nodeType":"115","messageId":"116","endLine":2,"endColumn":35},{"ruleId":"119","severity":1,"message":"120","line":28,"column":9,"nodeType":"121","messageId":"122","endLine":40,"endColumn":18,"fix":"127"},{"ruleId":"119","severity":1,"message":"124","line":28,"column":9,"nodeType":"121","messageId":"122","endLine":36,"endColumn":16,"fix":"128"},{"ruleId":"119","severity":1,"message":"124","line":28,"column":9,"nodeType":"121","messageId":"122","endLine":34,"endColumn":17,"fix":"129"},{"ruleId":"113","severity":1,"message":"114","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"113","severity":1,"message":"130","line":1,"column":39,"nodeType":"115","messageId":"116","endLine":1,"endColumn":53},{"ruleId":"113","severity":1,"message":"117","line":6,"column":17,"nodeType":"115","messageId":"116","endLine":6,"endColumn":25},{"ruleId":"113","severity":1,"message":"131","line":6,"column":27,"nodeType":"115","messageId":"116","endLine":6,"endColumn":36},{"ruleId":"113","severity":1,"message":"117","line":2,"column":17,"nodeType":"115","messageId":"116","endLine":2,"endColumn":25},{"ruleId":"113","severity":1,"message":"132","line":20,"column":6,"nodeType":"115","messageId":"116","endLine":20,"endColumn":11},{"ruleId":"113","severity":1,"message":"117","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"124","line":39,"column":13,"nodeType":"121","messageId":"122","endLine":46,"endColumn":21,"fix":"133"},{"ruleId":"113","severity":1,"message":"117","line":6,"column":17,"nodeType":"115","messageId":"116","endLine":6,"endColumn":25},{"ruleId":"113","severity":1,"message":"131","line":6,"column":27,"nodeType":"115","messageId":"116","endLine":6,"endColumn":36},{"ruleId":"113","severity":1,"message":"114","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"113","severity":1,"message":"130","line":1,"column":39,"nodeType":"115","messageId":"116","endLine":1,"endColumn":53},{"ruleId":"113","severity":1,"message":"117","line":2,"column":17,"nodeType":"115","messageId":"116","endLine":2,"endColumn":25},{"ruleId":"113","severity":1,"message":"134","line":19,"column":6,"nodeType":"115","messageId":"116","endLine":19,"endColumn":12},{"ruleId":"113","severity":1,"message":"117","line":3,"column":17,"nodeType":"115","messageId":"116","endLine":3,"endColumn":25},{"ruleId":"109","replacedBy":"135"},{"ruleId":"111","replacedBy":"136"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"@typescript-eslint/no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'TextField' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property catch.","MemberExpression","unexpectedWhitespace",{"range":"139","text":"140"},"Unexpected whitespace before property then.",{"range":"141","text":"140"},{"range":"142","text":"140"},{"range":"143","text":"140"},{"range":"144","text":"140"},{"range":"145","text":"140"},"'SyntheticEvent' is defined but never used.","'FormEvent' is defined but never used.","'Forum' is defined but never used.",{"range":"146","text":"140"},"'Thread' is defined but never used.",["137"],["138"],"no-global-assign","no-unsafe-negation",[1516,1518],".",[1388,1390],[1318,1320],[1117,1119],[1003,1005],[941,943],[1426,1428]]